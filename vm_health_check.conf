#!/bin/bash

# setup_vm_health_automation.sh - Setup script for VM Health Check automation
# This script helps you configure automated monitoring with cron jobs and SNS notifications

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
HEALTH_SCRIPT="$SCRIPT_DIR/enhanced_vm_health_check.sh"
CONFIG_FILE="/etc/vm_health_check.conf"
LOG_FILE="/var/log/vm_health_check.log"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if running as root
check_root() {
    if [[ $EUID -eq 0 ]]; then
        print_warning "Running as root. This is recommended for system-wide installation."
        return 0
    else
        print_warning "Not running as root. Some features may require sudo privileges."
        return 1
    fi
}

# Function to install required dependencies
install_dependencies() {
    print_status "Installing required dependencies..."
    
    # Update package list
    sudo apt-get update -qq
    
    # Install required packages
    sudo apt-get install -y bc cron awscli
    
    print_status "Dependencies installed successfully."
}

# Function to setup configuration file
setup_config() {
    print_status "Setting up configuration file..."
    
    if [ -f "$CONFIG_FILE" ]; then
        print_warning "Configuration file already exists at $CONFIG_FILE"
        read -p "Do you want to overwrite it? (y/N): " overwrite
        if [[ ! $overwrite =~ ^[Yy]$ ]]; then
            print_status "Keeping existing configuration file."
            return 0
        fi
    fi
    
    # Create configuration file
    sudo tee "$CONFIG_FILE" > /dev/null <<EOF
# VM Health Check Configuration File
# Generated on $(date)

# Threshold values (percentage)
CPU_THRESHOLD=60
MEMORY_THRESHOLD=60
DISK_THRESHOLD=60

# SNS Configuration
SNS_TOPIC_ARN=""
AWS_REGION="us-east-1"

# Logging
LOG_FILE="/var/log/vm_health_check.log"
EOF
    
    sudo chmod 644 "$CONFIG_FILE"
    print_status "Configuration file created at $CONFIG_FILE"
}

# Function to configure AWS SNS
configure_sns() {
    print_status "Configuring AWS SNS notifications..."
    
    echo "To enable SNS notifications, you need:"
    echo "1. AWS CLI configured with appropriate credentials"
    echo "2. An SNS topic ARN"
    echo ""
    
    read -p "Do you want to configure SNS notifications? (y/N): " configure_sns
    
    if [[ $configure_sns =~ ^[Yy]$ ]]; then
        # Check if AWS CLI is configured
        if ! aws sts get-caller-identity &>/dev/null; then
            print_error "AWS CLI is not configured. Please run 'aws configure' first."
            return 1
        fi
        
        read -p "Enter your SNS Topic ARN: " sns_arn
        read -p "Enter your AWS Region (default: us-east-1): " aws_region
        aws_region=${aws_region:-us-east-1}
        
        # Update configuration file
        sudo sed -i "s|SNS_TOPIC_ARN=\"\"|SNS_TOPIC_ARN=\"$sns_arn\"|" "$CONFIG_FILE"
        sudo sed -i "s|AWS_REGION=\"us-east-1\"|AWS_REGION=\"$aws_region\"|" "$CONFIG_FILE"
        
        print_status "SNS configuration updated."
        
        # Test SNS notification
        read -p "Do you want to send a test notification? (y/N): " test_sns
        if [[ $test_sns =~ ^[Yy]$ ]]; then
            aws sns publish \
                --topic-arn "$sns_arn" \
                --subject "VM Health Check - Test Notification" \
                --message "This is a test notification from VM Health Check setup script. If you receive this, SNS is configured correctly." \
                --region "$aws_region"
            
            if [ $? -eq 0 ]; then
                print_status "Test notification sent successfully!"
            else
                print_error "Failed to send test notification. Please check your SNS configuration."
            fi
        fi
    else
        print_status "SNS notifications will be disabled."
    fi
}

# Function to setup cron jobs
setup_cron_jobs() {
    print_status "Setting up automated cron jobs..."
    
    echo "Available cron job options:"
    echo "1. Every 5 minutes (recommended for production)"
    echo "2. Every 15 minutes"
    echo "3. Every hour"
    echo "4. Custom interval"
    echo "5. Skip cron setup"
    echo ""
    
    read -p "Choose an option (1-5): " cron_choice
    
    case $cron_choice in
        1)
            cron_schedule="*/5 * * * *"
            description="every 5 minutes"
            ;;
        2)
            cron_schedule="*/15 * * * *"
            description="every 15 minutes"
            ;;
        3)
            cron_schedule="0 * * * *"
            description="every hour"
            ;;
        4)
            read -p "Enter custom cron schedule (e.g., '0 */2 * * *' for every 2 hours): " cron_schedule
            description="custom schedule"
            ;;
        5)
            print_status "Skipping cron setup."
            return 0
            ;;
        *)
            print_error "Invalid choice. Skipping cron setup."
            return 1
            ;;
    esac
    
    # Create cron job
    cron_command="$HEALTH_SCRIPT --silent --notify"
    cron_entry="$cron_schedule $cron_command"
    
    # Remove existing cron job if it exists
    (crontab -l 2>/dev/null | grep -v "$HEALTH_SCRIPT") | crontab -
    
    # Add new cron job
    (crontab -l 2>/dev/null; echo "$cron_entry") | crontab -
    
    if [ $? -eq 0 ]; then
        print_status "Cron job added successfully ($description)."
        print_status "Command: $cron_command"
    else
        print_error "Failed to setup cron job."
        return 1
    fi
}

# Function to setup log rotation
setup_log_rotation() {
    print_status "Setting up log rotation..."
    
    sudo tee "/etc/logrotate.d/vm-health-check" > /dev/null <<EOF
$LOG_FILE {
    daily
    missingok
    rotate 30
    compress
    delaycompress
    notifempty
    copytruncate
}
EOF
    
    print_status "Log rotation configured."
}

# Function to test the installation
test_installation() {
    print_status "Testing the installation..."
    
    # Make script executable
    chmod +x "$HEALTH_SCRIPT"
    
    # Test basic functionality
    print_status "Running basic health check..."
    "$HEALTH_SCRIPT"
    
    if [ $? -eq 0 ]; then
        print_status "Basic test passed!"
    else
        print_error "Basic test failed!"
        return 1
    fi
    
    # Test explain functionality
    print_status "Running detailed health check..."
    "$HEALTH_SCRIPT" explain
    
    if [ $? -eq 0 ]; then
        print_status "Detailed test passed!"
    else
        print_error "Detailed test failed!"
        return 1
    fi
}

# Main setup function
main() {
    echo "=============================================="
    echo "VM Health Check - Automation Setup Script"
    echo "=============================================="
    echo ""
    
    # Check if health check script exists
    if [ ! -f "$HEALTH_SCRIPT" ]; then
        print_error "Health check script not found at $HEALTH_SCRIPT"
        print_error "Please ensure enhanced_vm_health_check.sh is in the same directory as this setup script."
        exit 1
    fi
    
    check_root
    
    print_status "Starting setup process..."
    echo ""
    
    # Install dependencies
    install_dependencies
    echo ""
    
    # Setup configuration
    setup_config
    echo ""
    
    # Configure SNS
    configure_sns
    echo ""
    
    # Setup cron jobs
    setup_cron_jobs
    echo ""
    
    # Setup log rotation
    setup_log_rotation
    echo ""
    
    # Test installation
    test_installation
    echo ""
    
    print_status "Setup completed successfully!"
    echo ""
    echo "Next steps:"
    echo "1. Edit $CONFIG_FILE to customize thresholds"
    echo "2. Check logs at $LOG_FILE"
    echo "3. Monitor cron job execution with 'crontab -l'"
    echo ""
    echo "Useful commands:"
    echo "- Manual check: $HEALTH_SCRIPT explain"
    echo "- Silent check with notifications: $HEALTH_SCRIPT --silent --notify"
    echo "- View logs: sudo tail -f $LOG_FILE"
    echo "- Edit cron jobs: crontab -e"
}

# Run main function
main "$@"
